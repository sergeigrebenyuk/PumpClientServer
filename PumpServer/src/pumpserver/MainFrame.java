/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pumpserver;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonModel;
import javax.swing.DefaultListModel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.event.ChangeListener;

/**
 *
 * @author sg
 */

public class MainFrame extends javax.swing.JFrame implements ActionListener, MouseListener, ChangeListener, ItemListener {
    public PumpServer app;
    ClientDevice selected_pump;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        
        initComponents();
        

    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        remoteControl = new javax.swing.ButtonGroup();
        directionGroup = new javax.swing.ButtonGroup();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        buttonPurgeDirectionGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        pumpList = new javax.swing.JList();
        textSelectedItem = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        sendSettings = new javax.swing.JButton();
        textStatus = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        realFlowRAte = new javax.swing.JLabel();
        realFactor = new javax.swing.JLabel();
        realRevPeriod = new javax.swing.JLabel();
        realRevDC = new javax.swing.JLabel();
        realDirection = new javax.swing.JLabel();
        realControl = new javax.swing.JLabel();
        textScaleFactor = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        radioRemote = new javax.swing.JRadioButton();
        radioManual = new javax.swing.JRadioButton();
        textFlowRate = new javax.swing.JSpinner();
        textRevDutyCycle = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        radioBackward = new javax.swing.JRadioButton();
        radioForward = new javax.swing.JRadioButton();
        textRevPeriod = new javax.swing.JSpinner();
        revPeriod = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        textPurgeSpeed = new javax.swing.JSpinner();
        revPeriod4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        radioPurgeBackward = new javax.swing.JRadioButton();
        radioPurgeForward = new javax.swing.JRadioButton();
        sendSettings1 = new javax.swing.JButton();
        textPurgeTime = new javax.swing.JSpinner();
        revPeriod5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        textTickPeriod = new javax.swing.JSpinner();
        revPeriod1 = new javax.swing.JLabel();
        textTimeout = new javax.swing.JSpinner();
        revPeriod2 = new javax.swing.JLabel();
        textLogPeriod = new javax.swing.JSpinner();
        revPeriod3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textRPIStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pump Server");
        setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        pumpList.setBackground(new java.awt.Color(255, 245, 250));
        pumpList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pumpList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "No pumps online" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        pumpList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pumpList.setToolTipText("Click on pump name to change its settings");
        pumpList.addMouseListener(this);
        jScrollPane1.setViewportView(pumpList);

        textSelectedItem.setBackground(new java.awt.Color(255, 255, 204));
        textSelectedItem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textSelectedItem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textSelectedItem.setText("No pump selected");
        textSelectedItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textSelectedItem.setName(""); // NOI18N
        textSelectedItem.setOpaque(true);

        jLabel1.setText("Pumps online :");

        sendSettings.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sendSettings.setForeground(new java.awt.Color(153, 0, 0));
        sendSettings.setText("Commit settings");
        sendSettings.setBorder(null);
        sendSettings.addActionListener(this);

        textStatus.setBackground(new java.awt.Color(204, 204, 204));
        textStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        textStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textStatus.setText("...");
        textStatus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textStatus.setName(""); // NOI18N
        textStatus.setOpaque(true);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setText("New settings:");

        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Actual:");

        realFlowRAte.setForeground(new java.awt.Color(153, 0, 0));
        realFlowRAte.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        realFlowRAte.setText("---");

        realFactor.setForeground(new java.awt.Color(153, 0, 0));
        realFactor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        realFactor.setText("---");

        realRevPeriod.setForeground(new java.awt.Color(153, 0, 0));
        realRevPeriod.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        realRevPeriod.setText("---");

        realRevDC.setForeground(new java.awt.Color(153, 0, 0));
        realRevDC.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        realRevDC.setText("---");

        realDirection.setForeground(new java.awt.Color(153, 0, 0));
        realDirection.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        realDirection.setText("---");

        realControl.setForeground(new java.awt.Color(153, 0, 0));
        realControl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        realControl.setText("---");

        textScaleFactor.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textScaleFactor.setEditor(new javax.swing.JSpinner.NumberEditor(textScaleFactor, ""));
        textScaleFactor.addChangeListener(this);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Controlled"));

        remoteControl.add(radioRemote);
        radioRemote.setText("Remotely by this server");
        radioRemote.addItemListener(this);

        remoteControl.add(radioManual);
        radioManual.setText("By pump controls");
        radioManual.addChangeListener(this);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(radioRemote)
                    .add(radioManual, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(radioManual)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(radioRemote))
        );

        textFlowRate.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textFlowRate.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        textFlowRate.setEditor(new javax.swing.JSpinner.NumberEditor(textFlowRate, ""));
        textFlowRate.setOpaque(false);
        textFlowRate.addChangeListener(this);

        textRevDutyCycle.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textRevDutyCycle.setEditor(new javax.swing.JSpinner.NumberEditor(textRevDutyCycle, ""));
        textRevDutyCycle.addChangeListener(this);

        jLabel2.setText("Rate factor, 1-100");

        jLabel3.setText("Flow rate, %");

        jLabel4.setText("Reverse cycle time, s");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Direction"));

        directionGroup.add(radioBackward);
        radioBackward.setText("Reverse");

        directionGroup.add(radioForward);
        radioForward.setText("Forward");
        radioForward.addItemListener(this);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(radioForward)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(radioBackward)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(radioForward)
                    .add(radioBackward))
                .addContainerGap())
        );

        textRevPeriod.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textRevPeriod.setEditor(new javax.swing.JSpinner.NumberEditor(textRevPeriod, ""));
        textRevPeriod.addChangeListener(this);

        revPeriod.setText("Reverse period, s");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3)
                                    .add(jLabel2)
                                    .add(revPeriod))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, textRevPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, textScaleFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, textFlowRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(textRevDutyCycle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, realFlowRAte, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, realFactor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, realRevPeriod, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, realRevDC, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, realDirection, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, realControl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)))
                    .add(jSeparator1)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel7)))
                .add(10, 10, 10))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(textFlowRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(realFlowRAte)
                                    .add(jLabel3))
                                .add(6, 6, 6)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(textScaleFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(realFactor)
                                    .add(jLabel2))
                                .add(6, 6, 6)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(textRevPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(realRevPeriod)
                                    .add(revPeriod))
                                .add(25, 25, 25))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(textRevDutyCycle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel4))))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(85, 85, 85)
                        .add(realRevDC)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(realDirection)
                        .add(20, 20, 20)))
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(realControl)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Flow control", jPanel3);

        textPurgeSpeed.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textPurgeSpeed.setEditor(new javax.swing.JSpinner.NumberEditor(textPurgeSpeed, ""));
        textPurgeSpeed.setValue(5);
        textPurgeSpeed.addChangeListener(this);

        revPeriod4.setText("Purge speed (100% flow x Scale  x)");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Direction"));

        buttonPurgeDirectionGroup.add(radioPurgeBackward);
        radioPurgeBackward.setText("Reverse");

        buttonPurgeDirectionGroup.add(radioPurgeForward);
        radioPurgeForward.setText("Forward");
        radioPurgeForward.addItemListener(this);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(radioPurgeForward)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(radioPurgeBackward)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(radioPurgeForward)
                    .add(radioPurgeBackward))
                .addContainerGap())
        );

        sendSettings1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sendSettings1.setForeground(new java.awt.Color(153, 0, 0));
        sendSettings1.setText("Purge!");
        sendSettings1.setBorder(null);
        sendSettings1.addActionListener(this);

        textPurgeTime.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textPurgeTime.setEditor(new javax.swing.JSpinner.NumberEditor(textPurgeTime, ""));
        textPurgeTime.setValue(5);
        textPurgeTime.addChangeListener(this);

        revPeriod5.setText("Purge time, s");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(sendSettings1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(revPeriod4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(textPurgeSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(revPeriod5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(textPurgeTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textPurgeSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(revPeriod4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textPurgeTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(revPeriod5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(37, 37, 37)
                .add(sendSettings1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Purge conrol", jPanel5);

        textTickPeriod.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textTickPeriod.setEditor(new javax.swing.JSpinner.NumberEditor(textTickPeriod, ""));
        textTickPeriod.setValue(2);
        textTickPeriod.addChangeListener(this);

        revPeriod1.setText("\"Alive\" tick every, s");

        textTimeout.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textTimeout.setEditor(new javax.swing.JSpinner.NumberEditor(textTimeout, ""));
        textTimeout.setValue(1);
        textTimeout.addChangeListener(this);

        revPeriod2.setText("\"Alive\" timeout, tcks");

        textLogPeriod.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        textLogPeriod.setEditor(new javax.swing.JSpinner.NumberEditor(textLogPeriod, ""));
        textLogPeriod.setValue(5);
        textLogPeriod.addChangeListener(this);

        revPeriod3.setText("Log state every, tcks");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(revPeriod2)
                    .add(revPeriod1)
                    .add(revPeriod3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 57, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(textLogPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textTimeout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textTickPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(24, 24, 24))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(textTickPeriod)
                    .add(revPeriod1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textTimeout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(revPeriod2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textLogPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(revPeriod3))
                .addContainerGap(192, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Service", jPanel4);

        jTextField1.setEditable(false);
        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setText("(c) 2019 Sergei Grebenyuk, sergeigrebenyuk@gmail.com");
        jTextField1.setBorder(null);

        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setText("v.0.44");

        textRPIStatus.setBackground(new java.awt.Color(255, 255, 204));
        textRPIStatus.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textRPIStatus.setForeground(new java.awt.Color(150, 0, 0));
        textRPIStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textRPIStatus.setText("RPI Offline");
        textRPIStatus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textRPIStatus.setName(""); // NOI18N
        textRPIStatus.setOpaque(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .add(30, 30, 30)
                                .add(sendSettings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 236, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, textStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(textSelectedItem, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textRPIStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textSelectedItem)
                    .add(textRPIStatus))
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(sendSettings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 318, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(textStatus)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5)))
        );
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == sendSettings) {
            MainFrame.this.sendSettingsActionPerformed(evt);
        }
        else if (evt.getSource() == sendSettings1) {
            MainFrame.this.sendSettings1ActionPerformed(evt);
        }
    }

    public void itemStateChanged(java.awt.event.ItemEvent evt) {
        if (evt.getSource() == radioRemote) {
            MainFrame.this.radioRemoteItemStateChanged(evt);
        }
        else if (evt.getSource() == radioForward) {
            MainFrame.this.radioForwardItemStateChanged(evt);
        }
        else if (evt.getSource() == radioPurgeForward) {
            MainFrame.this.radioPurgeForwardItemStateChanged(evt);
        }
    }

    public void mouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getSource() == pumpList) {
            MainFrame.this.pumpListMouseClicked(evt);
        }
    }

    public void mouseEntered(java.awt.event.MouseEvent evt) {
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
    }

    public void mousePressed(java.awt.event.MouseEvent evt) {
    }

    public void mouseReleased(java.awt.event.MouseEvent evt) {
    }

    public void stateChanged(javax.swing.event.ChangeEvent evt) {
        if (evt.getSource() == textScaleFactor) {
            MainFrame.this.textScaleFactorStateChanged(evt);
        }
        else if (evt.getSource() == radioManual) {
            MainFrame.this.radioManualStateChanged(evt);
        }
        else if (evt.getSource() == textFlowRate) {
            MainFrame.this.textFlowRateStateChanged(evt);
        }
        else if (evt.getSource() == textRevDutyCycle) {
            MainFrame.this.textRevDutyCycleStateChanged(evt);
        }
        else if (evt.getSource() == textRevPeriod) {
            MainFrame.this.textRevPeriodStateChanged(evt);
        }
        else if (evt.getSource() == textPurgeSpeed) {
            MainFrame.this.textPurgeSpeedStateChanged(evt);
        }
        else if (evt.getSource() == textPurgeTime) {
            MainFrame.this.textPurgeTimeStateChanged(evt);
        }
        else if (evt.getSource() == textTickPeriod) {
            MainFrame.this.textTickPeriodStateChanged(evt);
        }
        else if (evt.getSource() == textTimeout) {
            MainFrame.this.textTimeoutStateChanged(evt);
        }
        else if (evt.getSource() == textLogPeriod) {
            MainFrame.this.textLogPeriodStateChanged(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void pumpListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pumpListMouseClicked
        Object selObj = pumpList.getSelectedValue();
        selected_pump=null;
        if (selObj==null) return;
        
        String key = selObj.toString().split(" :")[0];
        selected_pump = app.pumpMap.get(key);
        
        if (selected_pump==null) return;
        
        textSelectedItem.setText(selObj.toString());
        radioRemote.setSelected(selected_pump.remote.matches("remote"));  
        radioManual.setSelected(selected_pump.remote.matches("manual"));  
        radioForward.setSelected(selected_pump.direction.matches("fwd"));  
        radioBackward.setSelected(selected_pump.direction.matches("rev"));  
        
        textFlowRate.setValue(Integer.valueOf(Integer.parseInt(selected_pump.flowRate)));
        textRevDutyCycle.setValue(Integer.valueOf(Integer.parseInt(selected_pump.revActivityCycle)));
        textScaleFactor.setValue(Integer.valueOf(Integer.parseInt(selected_pump.scaleFactor)));
        textRevPeriod.setValue(Integer.valueOf(Integer.parseInt(selected_pump.revPeriod)));
        
    }//GEN-LAST:event_pumpListMouseClicked

    private void sendSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSettingsActionPerformed
        if (selected_pump==null) return;
        if (selected_pump.strID.startsWith("RPI")) return;
                    
        selected_pump.flowRate = textFlowRate.getValue().toString();
        selected_pump.revActivityCycle = textRevDutyCycle.getValue().toString();
        selected_pump.scaleFactor = textScaleFactor.getValue().toString();
        selected_pump.revPeriod = textRevPeriod.getValue().toString();
        
        selected_pump.remote = radioRemote.isSelected()?"remote":"manual";
        selected_pump.direction = radioForward.isSelected()?"fwd":"rev";
        
        
        String pars = String.format("New-params;%s;%s;%s;%s;%s;%s;%s;", selected_pump.strID,selected_pump.flowRate,selected_pump.revActivityCycle,selected_pump.scaleFactor,selected_pump.remote,selected_pump.direction,selected_pump.revPeriod);
        
        app.echoServer.UpdateClientSettings(pars, selected_pump.ipAddress);
        UpdateStatus("New settings sent. Waiting for response from the pump...");    
    }//GEN-LAST:event_sendSettingsActionPerformed

    private void textScaleFactorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textScaleFactorStateChanged
        onSettingsChanged();
    }//GEN-LAST:event_textScaleFactorStateChanged

    private void radioForwardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioForwardItemStateChanged
        onSettingsChanged();        // TODO add your handling code here:
    }//GEN-LAST:event_radioForwardItemStateChanged

    private void radioRemoteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioRemoteItemStateChanged
        onSettingsChanged();// TODO add your handling code here:
    }//GEN-LAST:event_radioRemoteItemStateChanged

    private void textFlowRateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textFlowRateStateChanged
        onSettingsChanged();// TODO add your handling code here:
    }//GEN-LAST:event_textFlowRateStateChanged

    private void textRevDutyCycleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textRevDutyCycleStateChanged
        onSettingsChanged();// TODO add your handling code here:
    }//GEN-LAST:event_textRevDutyCycleStateChanged

    private void textRevPeriodStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textRevPeriodStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textRevPeriodStateChanged

    private void textTickPeriodStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textTickPeriodStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textTickPeriodStateChanged

    private void textTimeoutStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textTimeoutStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textTimeoutStateChanged

    private void textLogPeriodStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textLogPeriodStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textLogPeriodStateChanged

    private void radioManualStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioManualStateChanged
        if (radioManual.isSelected())
        {
            textFlowRate.setEnabled(false);
            radioForward.setEnabled(false);
            radioBackward.setEnabled(false);
        }
        else
        {
            textFlowRate.setEnabled(true);
            radioForward.setEnabled(true);
            radioBackward.setEnabled(true);
        }
    }//GEN-LAST:event_radioManualStateChanged

    private void textPurgeSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textPurgeSpeedStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textPurgeSpeedStateChanged

    private void radioPurgeForwardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioPurgeForwardItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_radioPurgeForwardItemStateChanged

    private void sendSettings1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSettings1ActionPerformed
           if (selected_pump==null) return;
        
        String PurgeSpeed = textPurgeSpeed.getValue().toString();
        String PurgeTime = textPurgeTime.getValue().toString();
        String PurgeForward = radioPurgeForward.isSelected()?"fwd":"rev";
        
        String pars = String.format("Purge;%s;%s;%s;", PurgeSpeed,PurgeTime,PurgeForward);
        
        app.echoServer.UpdateClientSettings(pars, selected_pump.ipAddress);
        UpdateStatus("Purge command sent. Waiting for response from the pump...");    
    }//GEN-LAST:event_sendSettings1ActionPerformed

    private void textPurgeTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textPurgeTimeStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textPurgeTimeStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);

            }
        });
    }
DefaultListModel listModel = new DefaultListModel();


    public void PopulateGUI(HashMap<String, ClientDevice> _map){
      
        Object selObj = pumpList.getSelectedValue();
        textSelectedItem.setText("----");
        listModel.clear();
        int pumps_online=0;
        boolean rpi_online=false;
        for (Map.Entry<String, ClientDevice> entry : _map.entrySet()) {
            ClientDevice client = _map.get(entry.getKey().toString());
            if (!client.online) continue;
            String item = client.ipAddress.getHostAddress() +" : " +client.strID;
            textSelectedItem.setText(item);
            if (client.strID.startsWith("RPI"))
                rpi_online=true;
            //Logger.getLogger(EchoServer.class.getName()).log(Level.INFO, "selected client : "+item);                
            listModel.addElement(item);   
            pumps_online++;
        }
        if (selObj!=null) textSelectedItem.setText(selObj.toString());
        if (pumps_online==0) listModel.addElement("No clients online...");   
            
        pumpList.setModel(listModel);
        pumpList.setSelectedValue(selObj, true);
        
        if (rpi_online)
        {
            textRPIStatus.setText("RPI Online");
            textRPIStatus.setForeground(new Color(0,150,0));
        }
        else
        {
            textRPIStatus.setText("RPI Onffline");
            textRPIStatus.setForeground(new Color(150,0,0));
        }
        
    }
    void UpdateRealSettings(ClientDevice pump) {
        //update controls only if the corresponding client is click-selected on the list
        Object selObj = pumpList.getSelectedValue();
        if (selObj==null) return; //if nothing selected, exit
        String key = selObj.toString().split(" :")[0];
        selected_pump = app.pumpMap.get(key);
        if (selected_pump==null) return;
        if (!selected_pump.equals(pump)) return; // exit if some other client is currently selected on the list
        
        realControl.setText(pump.remote);
        realDirection.setText(pump.r_direction);
        realFactor.setText(pump.r_scaleFactor);
        realFlowRAte.setText(pump.r_flowRate);
        realRevDC.setText(pump.r_revDutyCycle);
        realRevPeriod.setText(pump.r_revPeriod);
        
                
    }
    public void UpdateStatus(String stat){
      textStatus.setText(stat);
      sendSettings.setText("Committed");
      sendSettings.setForeground(Color.black);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonPurgeDirectionGroup;
    private javax.swing.ButtonGroup directionGroup;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList pumpList;
    private javax.swing.JRadioButton radioBackward;
    private javax.swing.JRadioButton radioForward;
    private javax.swing.JRadioButton radioManual;
    private javax.swing.JRadioButton radioPurgeBackward;
    private javax.swing.JRadioButton radioPurgeForward;
    private javax.swing.JRadioButton radioRemote;
    private javax.swing.JLabel realControl;
    private javax.swing.JLabel realDirection;
    private javax.swing.JLabel realFactor;
    private javax.swing.JLabel realFlowRAte;
    private javax.swing.JLabel realRevDC;
    private javax.swing.JLabel realRevPeriod;
    private javax.swing.ButtonGroup remoteControl;
    private javax.swing.JLabel revPeriod;
    private javax.swing.JLabel revPeriod1;
    private javax.swing.JLabel revPeriod2;
    private javax.swing.JLabel revPeriod3;
    private javax.swing.JLabel revPeriod4;
    private javax.swing.JLabel revPeriod5;
    public javax.swing.JButton sendSettings;
    public javax.swing.JButton sendSettings1;
    private javax.swing.JSpinner textFlowRate;
    private javax.swing.JSpinner textLogPeriod;
    private javax.swing.JSpinner textPurgeSpeed;
    private javax.swing.JSpinner textPurgeTime;
    private javax.swing.JLabel textRPIStatus;
    private javax.swing.JSpinner textRevDutyCycle;
    private javax.swing.JSpinner textRevPeriod;
    private javax.swing.JSpinner textScaleFactor;
    private javax.swing.JLabel textSelectedItem;
    private javax.swing.JLabel textStatus;
    private javax.swing.JSpinner textTickPeriod;
    private javax.swing.JSpinner textTimeout;
    // End of variables declaration//GEN-END:variables

    void SetAppPntr(PumpServer serv) {
        app = serv;
    }

    private void onSettingsChanged() {
        sendSettings.setText("Commit settings");
        sendSettings.setForeground(Color.red);
    }

    
}
